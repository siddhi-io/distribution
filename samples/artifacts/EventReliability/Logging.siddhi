@App:name("Logging")
@App:description("The logger logs the message on the given priority with or without processed event.")

/*

Purpose:
    This application demonstrates how to use logging in siddhi.

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'
    2) If the Siddhi application starts successfully, the following messages would be shown on the console
        * Logging.siddhi - Started Successfully!.

Testing the Sample:
    1) Click on 'Event Simulator' (double arrows on left tab)
    2) Click 'Single Simulation' (this will be already selected)
    3) Select 'Logging' as Siddhi App Name
    4) Select 'EventStream' as StreamName
    5) Provide attribute values
        - symbol: item1
        - price : 10
    6) Send event

Viewing the Results:
    See the input and respective output on the console similar to the following (timestamp will be different).

        INFO {io.siddhi.core.query.processor.stream.LogStreamProcessor} - Logging: Logging at info level :, StreamEvent{ timestamp=1569916681779, beforeWindowData=null, onAfterWindowData=null, outputData=[item1, 10.0], type=CURRENT, next=null}
        INFO {io.siddhi.core.query.processor.stream.LogStreamProcessor} - Logging: Logging at warn level :, StreamEvent{ timestamp=1569916681779, beforeWindowData=null, onAfterWindowData=null, outputData=[item1, 10.0], type=CURRENT, next=null}

Note:
    You can change the user specified priority to change the log level. Accepted values are INFO, DEBUG, WARN, FATAL, ERROR, OFF, TRACE.
    DEBUG level will not print any message in this example.
*/

define stream EventStream(symbol string, price float);

-- This will log the output events with a priority of "INFO" and prefix "Logging at info level :"
from EventStream#log("INFO", "Logging at info level :", true)
select *
insert into OutputStream;

-- This will log the output events with a priority of "INFO" and prefix "Logging at debug level :"
from EventStream#log("DEBUG", "Logging at debug level :", true)
select *
insert into OutputStream;

-- This will log the output events with a priority of "WARN" and prefix "Logging at warn level :"
from EventStream#log("WARN", "Logging at warn level :")
select *
insert into OutputStream;

