@App:name("ConnectingSiddhiAppsWithInmemory")

@App:description('Connecting Siddhi apps using In-Memory transport to custom text mapping and the default text mapping and view the output on the console.')

/*

Purpose:
    This application demonstrates how to configure a Siddhi application to receive events to the SweetProductionStream via TCP transport in binary format and check the custom text mapping and the default text mapping using inMemory transport and log the events in OutputStreams accordingly to the output console.

Prerequisites:
    1) Save this sample

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'.
    2) If the Siddhi application starts successfully, the following messages would be shown on the console.
        * ConnectingSiddhiAppsWithInmemory.siddhi - Started Successfully!
        * Tcp Server started in 0.0.0.0:9892

Testing the Sample:
    You may send events via event simulator
        a) Open the event simulator by clicking on the second icon or pressing Ctrl+Shift+I.
        b) In the Single Simulation tab of the panel, specify the values as follows:
            * Siddhi App Name  : ConnectingSiddhiAppsWithInmemory
            * Stream Name      : SweetProductionStream
        c) In the name and amount fields, enter the following and then click Send to send the event.
            name: chocolate cake
            amount: 50.50
        d) Send some more events.

Viewing the Results:
    INFO {io.siddhi.core.stream.output.sink.LogSink} - Default Mapper : Event{timestamp=1569403340610, data=[chocolate cake, 50.5], isExpired=false}
    INFO {io.siddhi.core.stream.output.sink.LogSink} - Custom Mapper : Event{timestamp=1569403340611, data=[chocolate cake,Hello, 50.0], isExpired=false}
Notes:
    If the message "Tcp Server started in 0.0.0.0:9892" does not appear,it could be due to port 9892, defined in the Siddhi application is already being used by a different program. To resolve this issue, please do the following,
        * Stop this Siddhi application (Click 'Run' on menu bar -> 'Stop')
        * Change the port 9892 to an unused port, in this Siddhi application's source configuration.
        * Start the application and check whether the specified messages appear on the console
*/

@source(type='tcp', context='SweetProductionStream', port='9892',
@map(type='binary'))
define stream SweetProductionStream (name string, amount double);

@sink(type='log', prefix='Default Mapper')
define stream DefaultOutputStream (name string, amount double);

@sink(type='log', prefix='Custom Mapper')
define stream CustomOutputStream (name string, amount double);

-- Default text mapping.

@sink(type='inMemory', topic='homeDefault', @map(type='text'))
define stream InMemoryDefaultSweetProductionInputData (name string, amount double);

@source(type='inMemory', topic='homeDefault', @map(type='text'))
define stream UsageStreamDefault (name string, amount double);

-- Custom text mapping.

@sink(type='inMemory', topic='homeCustom', @map(type='text',
@payload("""name:{{name}},Hello,
amount:{{amount}}""")))
define stream InMemoryCustomSweetProductionInputData (name string, amount double);

@source(type='inMemory', topic='homeCustom', @map(type='text' , regex.A='((?<=name:)(.*)(?=,))',regex.B='([-0-9]+)',
@attributes(name = 'A', amount = 'B')))
define stream UsageStreamCustom (name string, amount double);

from SweetProductionStream
select *
insert into InMemoryDefaultSweetProductionInputData;

from UsageStreamDefault
select *
insert into DefaultOutputStream;

from SweetProductionStream
select *
insert into InMemoryCustomSweetProductionInputData;

from UsageStreamCustom
select *
insert into CustomOutputStream;
