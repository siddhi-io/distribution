@App:name("GRPCGenericServiceIntegration")
@App:description("Publish grpc requests using custom grpc service, receive their responses and process them")

/*

Purpose:
    This application demonstrates how to publish grpc requests with custom grpc services(Please finds the custom protobuf definition here "https://github.com/siddhi-io/distribution/tree/master/samples/sample-clients/grpc-generic-server/src/main/resources") and receive their response and process them.

Prerequisites:
    1) Save this sample
    2) Pack autogenerated protobuf and grpc service classes into a jar (If you are using maven to generate protobuf and grpc classes, you can use the .jar file that get creates in the target folder after executing the 'mvn clean install' command)
        (Please finds the "SweetProduction-gRPC.jar" from here "https://github.com/siddhi-io/distribution/tree/master/samples/sample-clients/grpc-generic-server/src/main/resources")
    3) Navigate to {SiddhiDistribution_Home}/jars and put that packed jar into jars folder
    4) Stop the siddhi tooling and re-start the tooling again. (to convert jar into OSGi bundle)

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'

    2) If the Siddhi application starts successfully, the following messages would be shown on the console
        * GRPCGenericServiceIntegration.siddhi - Started Successfully!

    Notes:
    Do not change the value of the port(8890), because the sample server that runs in this example uses the port 8890.

Testing the Sample:
    Publish grpc requests to the grpc service defined by 'publisher.url' in Sink configuration. You may starts a server with ant command as follows,
    1) Navigate to {SiddhiDistribution_Home}/samples/sample-clients/grpc-generic-server and run "ant" command as follows:
            Run "ant" command in the terminal
            If you want to stop the server press "Ctrl+C" in the terminal anytime
    2) Navigate to Event Simulator (Ctrl+Shift+I)
    3) Select this sample from "Siddhi App Name"
    4) Select "SweetProductionStream" and give relevant values to all attributes
        Ex :-  name: "Toffee"
               price: 12.00
    5) Press send to send an event to the server


Viewing the Results:
    See the output on the console.
        outputStream : Event{timestamp=1569870294094, data=[Toffee, 12.0, 10.8], isExpired=false}
    you will see a similar output like this (get 10% discount for the price).

 */

@sink(type='grpc-call',publisher.url = 'grpc://localhost:8890/io.siddhi.distribution.sample.grpc.SweetService/getDiscount',
                sink.id= '1', @map(type='protobuf'))
define stream SweetProductionStream (name string, price double);

@source(type='grpc-call-response', receiver.url = 'grpc://localhost:8890/io.siddhi.distribution.sample.grpc.SweetService/getDiscount',
    sink.id= '1', @map(type='protobuf', @attributes(name='name', originalPrice='trp:price', discountPrice='price')))
    define stream DiscountStream (name string, originalPrice double,discountPrice double);

@sink(type='log')
    define stream outputStream (name string, originalPrice double,discountPrice double);

@info(name = 'query')
from DiscountStream select * insert into outputStream;

