@App:name("GrpcGenericService")
@App:description("Use siddhi as a gRPC service")

/*

Purpose:

    This application demonstrates how to use grpc as a service with custom grpc service (Please finds the custom protobuf definition here "https://github.com/siddhi-io/distribution/tree/master/samples/sample-clients/grpc-generic-client/src/main/resources").

Prerequisites:

    1) Save this sample
    2) Pack autogenerated protobuf and grpc service classes into a jar (If you are using maven to generate protobuf and grpc classes, you can use the .jar file that get creates in the target folder after executing the 'mvn clean install' command)
        (Please finds the "SweetProduction-gRPC.jar" from here "https://github.com/siddhi-io/distribution/tree/master/samples/sample-clients/grpc-generic-client/src/main/resources")

    3) Navigate to {SiddhiDistribution_Home}/jars and put that packed jar into jars folder
    4) Stop the siddhi editor and re-start the editor again.

Executing the Sample:

    1) Start the Siddhi application by clicking on 'Run'
    2) If the Siddhi application starts successfully, the following messages would be shown on the console
        * GrpcGenericService.siddhi - Started Successfully!

Testing the Sample:

    Receive requests from the grpc method that defined by 'receiver.url' in Source configuration and send response back to the client. You may start the client as follows,

    1)  Navigate to {SiddhiDistribution_Home}/samples/sample-clients/grpc-generic-client and run "ant" command as follows:
                ant -Dport="5547"

        If you want to publish custom number of events, you need to run "ant" command as follows

                ant -Dport="5547" -DnoOfEventsToSend="5"

            Note:

                -"5547" is the port that use in this sample, if you change the port number in this sample change the "5547" to that port number.

Viewing the Results:

    See the output on the console.
        you will see a similar output like this in the siddhi console.
            GrpcGenericService : OutputStream : Event{timestamp=1569916635047, data=[Cupcake, 15.0, 13.5], isExpired=false}

        you will see a similar output like this in the "ant" terminal
            name: "Cupcake"
            price: 13.5

*/

@source(type = 'grpc-service',
	receiver.url = 'grpc://localhost:5547/io.siddhi.distribution.sample.grpc.SweetService/getDiscount', source.id = '1',
	@map(type = 'protobuf' ,
		@attributes(messageId = 'trp:message.id', name = 'name', originalPrice = 'price')))
 define stream SweetInputStream (messageId string, name string, originalPrice double);

@sink(type = 'grpc-service-response',
	publisher.url = 'grpc://localhost:5547/io.siddhi.distribution.sample.grpc.SweetService/getDiscount', source.id = '1', message.id = '{{messageId}}',
	@map(type = 'protobuf',
		@payload(name = 'name', price = 'discountPrice')))
 define stream SweetOutputStream (messageId string, name string, originalPrice double, discountPrice double);


@sink(type = 'log')
 define stream OutputStream (name string, originalPrice double, discountPrice double);

 --only to show output in the console

@info(name = 'SweetInputStream-to-SweetOutputStream')
 from SweetInputStream
select messageId, name, originalPrice, (originalPrice * 0.9) as discountPrice
insert into SweetOutputStream;

@info(name = 'SweetOutputStream-to-OutputStream')
 from SweetOutputStream
select name, originalPrice, discountPrice
insert into OutputStream;



