@App:name("RunOnDemandQueryOnAggregation")
@App:description("On-demand query for aggregation")

/*
Purpose:
    This application demonstrates how to use on-demand query to retrieve daily aggregations from the TradeAggregation within a specified time period.

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'
    2) If the Siddhi application starts successfully, the following messages would be shown on the console
        * RunOnDemandQueryOnAggregation.siddhi - Started Successfully!.

Testing the Sample:
    1) Click on 'Event Simulator' (double arrows on left tab)
    2) Click 'Single Simulation' (this will be already selected)
    3) Select 'RunOnDemandQueryOnAggregation' as Siddhi App Name
    4) Select 'TransactionStream' as StreamName
    5) Provide attribute values
        - symbol : T10
        - price : 100
    6) Send event
    7) Provide attribute values
        - symbol : T10
        - price : 200
    8) Send event
    9) Provide attribute values
        - symbol : T10
        - price :150
    10) Send event
    9) Provide attribute values
        - symbol : T12
        - price :150
    10) Send event
    11) Go to Tools -> Siddhi store query and select Siddhi App Name as 'RunOnDemandQueryOnAggregation'.
    12) In the textbox below 'Query', enter the following query.
            from TradeAggregation
              within "2019-02-15 00:00:00 +05:30", "2020-03-16 00:00:00 +05:30"
              per "days"
            select symbol, total, avgPrice;
    13) Or else you can send a CURL command as below.
            curl -X POST \
              http://localhost:9390/query \
              -H 'Content-Type: application/json' \
              -d '{
            "appName": "RunOnDemandQueryOnAggregation",
            "query": "from TradeAggregation within \"2019-02-15 00:00:00 +05:30\", \"2020-03-16 00:00:00 +05:30\" per \"hours\" select symbol, total, avgPrice"
            }'

Viewing the Results:
    See the input and respective output on the console similar to the following.
        {"records":[["T12",150.0,150.0],["T10",450.0,150.0]]}
*/

define stream TradeStream (symbol string, price double);

@sink(type='log')
define stream LogStream(totalRooms int);

@info(name='Aggregation definition for TradeAggregation')
define aggregation TradeAggregation
  from TradeStream
  select symbol, avg(price) as avgPrice, sum(price) as total
    group by symbol
    aggregate every sec ... year;

