@App:name("HTTP-Service")

@App:description('Use siddhi as a HTTP service')

Purpose:
    This application demonstrates how to use Siddhi 'http-service' source to receive events via HTTP transport and send a response back through the 'http-service-response' sink.

Prerequisites:
    1) Save this sample

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'

    2) If the Siddhi application starts successfully, the following messages would be shown on the console
        * HTTP source localhost:5005 has been started

    Notes:
    If you edit this application while it's running, stop the application -> Save -> Start.
    If the message "HTTP source localhost:5005 has been started" does not appear,it could be due to port 5005, defined in the Siddhi application is already being used by a different program. To resolve this issue, please do the following,
    * Stop this Siddhi application (Click 'Run' on menu bar -> 'Stop')
    * Change the port 5005 to an unused port, in this Siddhi application's source configuration.
    * Start the application and check whether the specified messages appear on the console

Testing the Sample:
    Publish events to the http endpoint defined by 'receiver.url' in Source configuration. You may publish events with curl command or Postman application as follows,
    
    1) Publish events with curl command:
        Publish few events in json format to the http endpoint as follows (The values for name, age and country attributes can be changed as desired)
        curl -X POST -d "{\"event\":{\"value1\":\"12\",\"value2\":20}}" http://localhost:5005/add --header "Content-Type:application/json"

    2) Publish events with Postman:
        a) Install 'Postman' application from Chrome web store
        b) Launch the application
        c) Make a 'Post' request to 'http://localhost:5005/add' endpoint. Set the Content-Type to 'application/json' and set the request body in json format as follows,
            {
                "event": {
                    "value1": 12,
                    "value2": 20
                }
            }

Viewing the Results:
    You will get a output like this as a response.
        {
            "event": {
                "messageId": "dba91410-8247-4317-ace1-d42fdbed9e61",    //auto-generated message id (messageId can be defferent since it is auto generated)
                "results": 32   // sum of the value1 and value2
            }
        }

*/

@source(type='http-service', receiver.url='http://localhost:5005/add',
        source.id='adder',
        @map(type='json', @attributes(messageId='trp:messageId',value1='$.event.value1',value2='$.event.value2')))
define stream AddStream (messageId string, value1 long, value2 long);

@sink(type='http-service-response', source.id='adder',
      message.id='{{messageId}}', @map(type = 'json'))
define stream ResultStream (messageId string, results long);

@info(name = 'query1')
from AddStream 
select messageId, value1 + value2 as results 
insert into ResultStream;
