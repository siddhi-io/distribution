@App:name("PersistEventsInElasticSearch")
@App:description('Receive events via simulator and persist the received events in elasticsearch store.')

/*

Purpose:
    This application demonstrates how to use siddhi-store-elasticsearch extension to store events using Siddhi queries. The sample depicts a scenario in a sweet production factory. The sweet production details, such as the name of the raw material and amount used for production, can be stored using InsertSweetProductionStream. The following streams can be used to search, delete, update, or upsert (update or insert) the existing data in the store:

    search - SearchSweetProductionStream
    insert - InsertSweetProductionStream
    delete - DeleteSweetProductionStream
    update - UpdateSweetProductionStream
    update or insert - UpdateOrInsertSweetProductionStream
    contains - ContainsSweetProductionStream (verifies whether all the attributes that enter in the stream exist in the store)

Prerequisites:
    1) Ensure that ElasticSearch Server is started on your machine.Check the compatibility of ElasticSearch version that you use with siddhi-store-elasticsearch extension version at:
          https://github.com/siddhi-io/siddhi-store-elasticsearch
    2) Add siddhi-store-elasticsearch.jar file into {Siddhi_Distribution_Home}/lib as follows:
           a) Download the bundle from: https://mvnrepository.com/artifact/io.siddhi.extension.store.elasticsearch/siddhi-store-elasticsearch/3.1.1
           b) Copy the jar into {Siddhi_Distribution_Home}/lib
    7) Save this sample.
    8) Restart the editor

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'.
    2) If the Siddhi application starts successfully, the following message is shown on the console
        * PersistEventsInElasticSearch.siddhi - Started Successfully!

    Note:
    If you want to edit this application while it's running, stop the application, make your edits and save the application, and then start it again.

Testing the Sample:
    1) Simulate single events:
        a) Click on 'Event Simulator' (double arrows on left tab) and click 'Single Simulation'
        b) Select 'PersistEventsInElasticSearch as 'Siddhi App Name' and select 'InsertSweetProductionStream' as 'Stream Name'.
        c) Provide attribute values, and then click Send.
    3) Optionally, send events to the other corresponding streams to add, delete, update, insert, and search events.

    Notes:
    - After a change in the store, you can use the search stream to see whether the operation is successful.

Viewing the Results:
    See the output for raw materials on the console. You can use SearchSweetProductionStream to check for inserted, deleted, and updated events.

*/


define stream InsertSweetProductionStream (name string, amount double);
define stream DeleteSweetProductionStream (name string);
define stream SearchSweetProductionStream (name string);
define stream UpdateSweetProductionStream (name string, amount double);
define stream UpdateOrInsertSweetProductionStream (name string, amount double);
define stream ContainsSweetProductionStream (name string, amount double);

@sink(type='log')
define stream LogStream(name string, amount double);

@Store(type="elasticsearch", host="localhost", index.name="mystocktable", field.length="symbol:100", bulk.actions="5000", bulk.size="1", concurrent.requests="2", flush.interval="1", backoff.policy.retry.no="3", backoff.policy.wait.time="1")
@PrimaryKey("symbol")
define table SweetProductionTable (name string,amount double);

--Inserting event into the elaststicsearch store
@info(name='insertQuery')
from InsertSweetProductionStream
insert into SweetProductionTable;

--Deleting event from elasticsearch store
@info(name = 'deleteQuery')
from DeleteSweetProductionStream
delete SweetProductionTable
on SweetProductionTable.name == name ;

--Updating an event in elasticsearch store
@info(name = 'updateQuery')
from UpdateSweetProductionStream
update SweetProductionTable
on SweetProductionTable.name == name ;

--Updating or inserting event to elasticearch store
@info(name = 'updateOrInsertQuery')
from UpdateOrInsertSweetProductionStream
update or insert into SweetProductionTable
on SweetProductionTable.name == name;

--Verifying whether a particular name,amount pair is in the elasticsearch store
@info(name = 'containsQuery')
from ContainsSweetProductionStream
[(SweetProductionTable.name == name and SweetProductionTable.amount == amount) in SweetProductionTable]
insert into LogStream;

--Perform a join on raw material name so that the data in the store can be viewed
@info(name='searchQuery')
from SearchSweetProductionStream as materialName join SweetProductionTable as sweetProductionTable
    on materialName.name == sweetProductionTable.name
select sweetProductionTable.name, sweetProductionTable.amount
insert into LogStream;
