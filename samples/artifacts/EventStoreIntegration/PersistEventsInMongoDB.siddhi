@App:name("PersistEventsInMongoDB")

@App:description('Receive events via simulator and persist the received data in the store.')

/*
Purpose:
This application demonstrates how to perform CRUD operations using Siddhi queries in MongoDB stores. The sample depicts a scenario in a sweet production factory. The sweet production details, such as name of the raw material and amount used for production, can be stored using insertSweetProductionStream. The following streams can be used to insert, update, search, delete and update or insert the existing data in the store.
    search - SearchSweetProductionStream
    insert - InsertSweetProductionStream
    delete - DeleteSweetProductionStream
    update - UpdateSweetProductionStream
    update or insert - UpdateOrInsertSweetProductionStream
    contains - ContainsSweetProductionStream (verifies whether all the attributes that entered in the stream exists in the store).

Prerequisites:
    1) Ensure that MongoDB is installed on your machine. (https://docs.mongodb.com/manual/administration/install-community/).
    2) If auth is not enabled in the MongoDB instance, skip steps 3 and 4.
    3) Create a data store named 'production' in MongoDB with relevant access privileges.
    4) Create a collection named 'SweetProductionTable'and insert values into 'SweetProductionTable'.
    5) Save this sample.

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'.
    2) If the Siddhi application starts successfully, the following message is shown on the console:
        * PersistEventsInMongoDB.siddhi - Started Successfully!

    Note:
    If you want to edit this application, stop the application, make your edits and save, and then start the application again.

Testing the Sample:
    1) Simulate single events as follows:
        a) Click on Event Simulator (double arrows on left tab) and then 'Single Simulation'.
        b) For the Siddhi App Name, select 'PersistEventsInMongoDB'.
        c) For the Stream Name, select 'searchSweetProductionStream'.
        d) Enter attribute values and click Send.
    2) Send an event where the name matches a name value in the data you just inserted to the SweetProductionTable. This will satisfy the 'on' condition of the join query.

    Notes:
      * You can send events to the other corresponding streams to add, delete, update, insert, and search events.
      * The Primary Key constraint in SweetProductionTable is disabled, because the name cannot be used as a PrimaryKey in a ProductionTable.
      * You can use Siddhi functions to create a unique ID for the received events, which you can then use to apply the Primary Key constraint on the data store records. (http://wso2.github.io/siddhi/documentation/siddhi-4.0/#function)

Viewing the Results:
    See the output for raw materials on the console. You can use searchSweetProductionStream to check for inserted, deleted, and updated events.

*/

define stream InsertSweetProductionStream (name string, amount double);
define stream DeleteSweetProductionStream (name string);
define stream SearchSweetProductionStream (name string);
define stream UpdateSweetProductionStream (name string, amount double);
define stream UpdateOrInsertSweetProductionStream (name string, amount double);
define stream ContainsSweetProductionStream (name string, amount double);

@sink(type='log')
define stream LogStream(name string, amount double);

@Store(type="mongodb",mongodb.uri='mongodb://localhost/production')

@IndexBy("amount {background:true}")
define table SweetProductionTable (name string, amount double);

--Inserting event into mongo store
@info(name='insertQuery')
from InsertSweetProductionStream
insert into SweetProductionTable;

--Deleting event from mongo store
@info(name = 'deleteQuery')
from DeleteSweetProductionStream
delete SweetProductionTable
on SweetProductionTable.name == name ;

--Updating event in mongo store
@info(name = 'updateQuery')
from UpdateSweetProductionStream
update SweetProductionTable
on SweetProductionTable.name == name ;

--Updating or inserting event in  mongo store
@info(name = 'updateOrInsertQuery')
from UpdateOrInsertSweetProductionStream
update or insert into SweetProductionTable
on SweetProductionTable.name == name;

--Verify whether a given material and an amount is stored in mongo store
@info(name = 'containsQuery')
from ContainsSweetProductionStream
[(SweetProductionTable.name == name and SweetProductionTable.amount == amount) in SweetProductionTable]
insert into LogStream;

--Perform a join on raw material name so that the data in the store can be viewed
@info(name='searchQuery')
from SearchSweetProductionStream as searchingMaterial join SweetProductionTable as material
    on searchingMaterial.name == material.name
select material.name, material.amount
insert into LogStream;
