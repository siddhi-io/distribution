@App:name("PublishEmailInTextFormat")
@APP:description("Demonstrates how to use siddhi-io-email for publishing events to files.")

/*

Purpose:
    This application demonstrates how to send a customized email by including the user input. An email is sent to the user by including the name of the item added to the Sweet Production list along with the time.

Prerequisites:
    1) Replace the Sink configuration values for following options.
        - username: senders username (Ex:- 'example123')
        - address: senders address (Ex:- 'example123@gmail.com')
        - password: senders password
        - to: receivers address (Ex:- 'example987@gmail.com')
        - subject: subject of the email
    2) You need to enable access to "less secure apps" in the sender's gmail account via "https://myaccount.google.com/lesssecureapps" link
    3) Save this sample

Executing the Sample:
    1) Start the Siddhi application by clicking on 'Run'
    2) If the Siddhi application starts successfully, the following messages would be shown on the console
        * PublishEmailInTextFormat.siddhi - Started Successfully!.

Testing the Sample:
    1) Click on 'Event Simulator' (double arrows on left tab)
    2) Click 'Single Simulation' (this will be already selected)
    3) Select 'PublishEmailInTextFormat' as Siddhi App Name
    4) Select 'SweetProductionStream' as Stream Name
    5) Provide attribute values
            - name: Mike
            - item: Cake
    6) Click on the start button (Arrow symbol) next to the newly created simulator

Viewing the Results:
    Check the receiver gmail inbox (The gmail referred to in 'to' Sink configuration) to see the alert similar to the following.
        Subject: Test Siddhi-io-email
        Content:
             Hey Mike,

            The item cake is added to the Sweet Productons list on 2019-08-20.

            Thanks.

        Template:
            Hey <name>,

            The item <item> is added to the Sweet Productons list on <date>.

            Thanks.

        The email content is displayed according to the above template.

*/

define stream SweetProductionStream (name string, item string);

@sink(type='email',
                    username ='<senders email user name>',
                    address ='<senders email address>',
                    password= '<senders email password>',
                    subject='Test Siddhi-io-email',
                    to='<receivers email address>',
                    port = '465',
                    host = 'smtp.gmail.com',
                    ssl.enable = 'true', @map(type='text', @payload(""" 
                    Hey {{name}}, 
                    
                    The item {{item}} is added to the Sweet Productons list on {{date}}.
                    
                    Thanks.
            """)))
define stream LowProductionAlertStream(name string, item string, date  string);

@sink(type='log')
define stream EmailLogStream(name string, item string, date string);

from SweetProductionStream#window.time(1 min)
select name, item, time:currentDate() as date
insert into LowProductionAlertStream;

from LowProductionAlertStream
insert into EmailLogStream;
